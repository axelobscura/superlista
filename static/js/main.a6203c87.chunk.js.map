{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","hooks/useTodoState.js","context/todos.context.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","value","setValue","e","target","initialTodos","todos","setTodos","addTodo","newTodoText","id","uuid","task","completed","removeTodo","todoId","updatedTodos","filter","todo","toggleTodo","map","editTodo","newTask","defaultTodos","TodosContext","createContext","TodosProvider","props","todosStuff","useTodoState","Provider","children","EditTodoForm","toogleEditForm","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","style","width","TextField","margin","onChange","fullWidth","autoFocus","Todo","useToggleState","isEditing","toggle","ListItem","height","Checkbox","tabIndex","checked","onClick","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Fragment","key","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6203c87.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useToggle(initialVal = false){\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  return [state, toggle];\n}\n\nexport default useToggle;","import { useState } from 'react';\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue('');\n  };\n  return [value, handleChange, reset];\n}","import { useState } from 'react';\nimport uuid from 'uuid/v1';\n\nexport default initialTodos => {\n  const [todos, setTodos] = useState(initialTodos);\n  return {\n    todos,\n    addTodo: newTodoText => {\n      setTodos([...todos, {id: uuid(),task:newTodoText,completed:false}]);\n    },\n    removeTodo: todoId => {\n      const updatedTodos = todos.filter(todo => todo.id !== todoId);\n      setTodos(updatedTodos);\n    },\n    toggleTodo: todoId => {\n      const updatedTodos = todos.map(todo => \n        todo.id === todoId ? {...todos, completed: !todo.completed } : todo\n      );\n      setTodos(updatedTodos);\n    },\n    editTodo: (todoId, newTask) => {\n      const updatedTodos = todos.map(todo => \n        todo.id === todoId ? {...todos, task: newTask} : todo\n      );\n      setTodos(updatedTodos);\n    }\n  }\n}\n","// Todos\n\n// all methods to interact with todos\nimport React, {createContext} from \"react\";\nimport useTodoState from '../hooks/useTodoState';\nconst defaultTodos = [\n  { id: 1, task: 'Wow the loan using goats', completed: 'false'},\n  { id: 2, task: 'Release crocodiles in the garden', completed: 'true'}\n]\n\nexport const TodosContext = createContext();\n\nexport function TodosProvider(props) {\n  const todosStuff = useTodoState(defaultTodos);\n  return (\n    <TodosContext.Provider value={todosStuff}>\n      {props.children}\n    </TodosContext.Provider>\n  )\n}","import React, { useContext } from 'react';\nimport useInputState from './hooks/useInputState';\nimport TextField from '@material-ui/core/TextField';\nimport { TodosContext } from './context/todos.context';\n\nfunction EditTodoForm({id, task, toogleEditForm}){\n  const { editTodo } = useContext(TodosContext);\n  const [value, handleChange, reset] = useInputState(task);\n  return(\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      editTodo(id, value);\n      reset();\n      toogleEditForm();\n    }}\n    style={{width: '100%'}}\n    >\n      <TextField \n        margin=\"normal\" \n        value={value} \n        onChange={handleChange}\n        fullWidth \n        autoFocus\n      />\n    </form>\n  )\n}\n\nexport default EditTodoForm;","import React, { useContext } from 'react';\nimport useToggleState from './hooks/useToggleState';\nimport EditTodoForm from './EditTodoForm';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { TodosContext } from './context/todos.context';\n\nfunction Todo({ id, task, completed }){\n  const { removeTodo, toggleTodo } = useContext(TodosContext);\n  const [isEditing, toggle] = useToggleState(false);\n  return (\n    <ListItem style={{ height: '64px' }}>\n      {isEditing ? (\n        <EditTodoForm id={id} task={task} toogleEditForm={toggle} />\n      ) : (\n      <>\n        <Checkbox tabIndex={-1} checked={completed} onClick={() => toggleTodo(id)} />\n        <ListItemText style={{textDecoration: completed ? \"line-through\" : \"none\"}}>\n          {task}\n        </ListItemText>\n        <ListItemSecondaryAction>\n          <IconButton aria-label=\"Delete\" onClick={() => removeTodo(id)}>\n            <DeleteIcon />\n          </IconButton>\n          <IconButton aria-label=\"Edit\" onClick={toggle}>\n            <EditIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </>\n      )}\n    </ListItem>\n  )\n}\n\nexport default Todo;\n","import React, { useContext } from 'react';\nimport Todo from './Todo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport { TodosContext } from './context/todos.context';\n\nfunction TodoList(props){\n  const { todos } = useContext(TodosContext);\n  if(todos.length)\n    return(\n      <Paper>\n        <List>\n          {todos.map((todo, i) => (\n\n            <React.Fragment key={i}>\n              <Todo {...todo} key={todo.id}/>\n              {i < todos.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    );\n    return null;\n}\n\nexport default TodoList;","import React, {useContext} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport useInputState from './hooks/useInputState';\nimport { TodosContext } from './context/todos.context';\n\nfunction TodoForm(){\n  const [value, handleChange, reset] = useInputState(\"\");\n  const { addTodo } = useContext(TodosContext);\n  return(\n    <Paper style={{ margin: '1rem 0', padding: '0 1rem' }}>\n      <form \n      onSubmit={e => {\n        e.preventDefault();\n        addTodo(value);\n        reset();\n      }}>\n        <TextField \n          value={value} \n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Add New Todo\"\n          fullWidth\n        />\n      </form>\n    </Paper>\n  )\n}\n\nexport default TodoForm;","import React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport Grid from '@material-ui/core/Grid';\nimport { TodosProvider } from './context/todos.context';\n\nfunction TodoApp(){\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n        <AppBar color=\"primary\" position=\"static\" style={{height: \"64px\"}}>\n          <Toolbar>\n            <Typography color=\"inherit\">TODOS WITH HOOKS</Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container justify='center' style={{marginTop: '1rem'}}>\n          <Grid item xs={11} md={8} lg={8}>\n            <TodosProvider>\n              <TodoForm />\n              <TodoList />\n            </TodosProvider>\n          </Grid>\n        </Grid>\n    </Paper>\n  )\n}\n\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './TodoApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}