{"version":3,"sources":["hooks/useToggleState.js","hooks/useInputState.js","hooks/useLocalStorageReducer.js","reducers/todo.reducer.js","context/todos.context.js","EditTodoForm.js","Todo.js","TodoList.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["useToggle","initialVal","useState","state","setState","value","setValue","e","target","useLocalStorageReducer","key","defaultVal","reducer","useReducer","JSON","parse","window","localStorage","getItem","String","dispatch","useEffect","setItem","stringify","action","type","id","uuid","task","completed","filter","todo","map","newTask","defaultTodos","TodosContext","createContext","DispatchContext","TodosProvider","props","todoReducer","todos","Provider","children","EditTodoForm","toogleEditForm","useContext","useInputState","handleChange","reset","onSubmit","preventDefault","style","width","TextField","margin","onChange","fullWidth","autoFocus","memo","useToggleState","isEditing","toggle","console","log","ListItem","height","Checkbox","tabIndex","checked","onClick","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","length","Paper","List","i","Fragment","Divider","TodoForm","padding","label","TodoApp","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1200de6e.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useToggle(initialVal = false){\n  const [state, setState] = useState(initialVal);\n  const toggle = () => {\n    setState(!state);\n  };\n  return [state, toggle];\n}\n\nexport default useToggle;","import { useState } from 'react';\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue('');\n  };\n  return [value, handleChange, reset];\n}","import { useReducer, useEffect } from \"react\";\n\nfunction useLocalStorageReducer(key, defaultVal, reducer){\n  const [state, dispatch] = useReducer(reducer, defaultVal, () => {\n    let value;\n    try{\n      value = JSON.parse(\n        window.localStorage.getItem(key) || String(defaultVal)\n      );\n    } catch(e) {\n      value = defaultVal;\n    }\n    return value;\n  })\n  useEffect(()=>{\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [state]);\n\n  return [state, dispatch];\n}\n\nexport default useLocalStorageReducer;","import uuid from \"uuid/v4\";\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD\":\n      return [...state, { id: uuid(), task: action.task, completed: false }];\n    case \"REMOVE\":\n      return state.filter(todo => todo.id !== action.id);\n    case \"TOGGLE\":\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      );\n    case \"EDIT\":\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, task: action.newTask } : todo\n      );\n    default:\n      return state;\n  }\n};\nexport default reducer;","import React, { createContext, useReducer } from \"react\";\nimport useLocalStorageReducer from '../hooks/useLocalStorageReducer';\nimport todoReducer from \"../reducers/todo.reducer.js\";\nconst defaultTodos = [\n  { id: 1, task: \"Mow the lawn using goats\", completed: false },\n  { id: 2, task: \"Release lady bugs into garden\", completed: true }\n];\nexport const TodosContext = createContext();\nexport const DispatchContext = createContext();\n\nexport function TodosProvider(props) {\n  const [todos, dispatch] = useLocalStorageReducer(\"todos\", defaultTodos, todoReducer);\n  return (\n    <TodosContext.Provider value={todos}>\n      <DispatchContext.Provider value={dispatch}>\n        {props.children}\n      </DispatchContext.Provider>\n    </TodosContext.Provider>\n  );\n}","import React, { useContext } from 'react';\nimport useInputState from './hooks/useInputState';\nimport TextField from '@material-ui/core/TextField';\nimport { DispatchContext } from './context/todos.context';\n\nfunction EditTodoForm({id, task, toogleEditForm}){\n  const dispatch = useContext(DispatchContext);\n  const [value, handleChange, reset] = useInputState(task);\n  return(\n    <form \n      onSubmit={(e) => {\n        e.preventDefault();\n        dispatch({type: \"EDIT\", id: id, newTask: value});\n        reset();\n        toogleEditForm();\n      }}\n    style={{width: '100%'}}\n    >\n      <TextField \n        margin=\"normal\" \n        value={value} \n        onChange={handleChange}\n        fullWidth \n        autoFocus\n      />\n    </form>\n  )\n}\n\nexport default EditTodoForm;","import React, { useContext, memo } from 'react';\nimport useToggleState from './hooks/useToggleState';\nimport EditTodoForm from './EditTodoForm';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport { DispatchContext } from './context/todos.context';\n\nfunction Todo({ id, task, completed }){\n  const dispatch = useContext(DispatchContext);\n  const [isEditing, toggle] = useToggleState(false);\n  console.log(\"todo re-render: \", task);\n  return (\n    <ListItem style={{ height: '64px' }}>\n      {isEditing ? (\n        <EditTodoForm id={id} task={task} toogleEditForm={toggle} />\n      ) : (\n      <>\n        <Checkbox \n          tabIndex={-1} \n          checked={completed} \n          onClick={() => dispatch({ type: \"TOGGLE\", id: id })} \n        />\n        <ListItemText style={{textDecoration: completed ? \"overline\" : \"none\"}}>\n          {task}\n        </ListItemText>\n        <ListItemSecondaryAction>\n          <IconButton aria-label=\"Delete\" onClick={() => dispatch({ type: \"REMOVE\", id: id })}>\n            <DeleteIcon />\n          </IconButton>\n          <IconButton aria-label=\"Edit\" onClick={toggle}>\n            <EditIcon />\n          </IconButton>\n        </ListItemSecondaryAction>\n      </>\n      )}\n    </ListItem>\n  )\n}\n\nexport default memo(Todo);\n","import React, { useContext } from 'react';\nimport Todo from './Todo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport { TodosContext } from './context/todos.context';\n\nfunction TodoList(){\n  const todos = useContext(TodosContext);\n  if(todos.length)\n    return(\n      <Paper>\n        <List>\n          {todos.map((todo, i) => (\n            <React.Fragment key={i}>\n              <Todo {...todo} key={todo.id}/>\n              {i < todos.length - 1 && <Divider />}\n            </React.Fragment>\n          ))}\n        </List>\n      </Paper>\n    );\n    return null;\n}\n\nexport default TodoList;","import React, {useContext} from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport useInputState from './hooks/useInputState';\nimport { DispatchContext } from './context/todos.context';\n\nfunction TodoForm(){\n  const [value, handleChange, reset] = useInputState(\"\");\n  const dispatch = useContext(DispatchContext);\n  return(\n    <Paper style={{ margin: '1rem 0', padding: '0 1rem' }}>\n      <form \n      onSubmit={e => {\n        e.preventDefault();\n        dispatch({ type: \"ADD\", task: value})\n        reset();\n      }}>\n        <TextField \n          value={value} \n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Add New Todo\"\n          fullWidth\n        />\n      </form>\n    </Paper>\n  )\n}\n\nexport default TodoForm;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport Grid from '@material-ui/core/Grid';\nimport { TodosProvider } from './context/todos.context';\n\nfunction TodoApp(){\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n        <AppBar color=\"primary\" position=\"static\" style={{height: \"64px\"}}>\n          <Toolbar>\n            <Typography color=\"inherit\">TODOS WITH HOOKS</Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container justify='center' style={{marginTop: '1rem'}}>\n          <Grid item xs={11} md={8} lg={8}>\n            <TodosProvider>\n              <TodoForm />\n              <TodoList />\n            </TodosProvider>\n          </Grid>\n        </Grid>\n    </Paper>\n  )\n}\n\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './TodoApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}