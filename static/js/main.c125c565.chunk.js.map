{"version":3,"sources":["Todo.js","TodoList.js","hooks/useInputState.js","TodoForm.js","TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["Todo","task","completed","ListItem","Checkbox","tabIndex","checked","style","textDecoration","ListItemSecondaryAction","IconButton","aria-label","TodoList","props","Paper","List","todos","map","todo","key","id","Divider","initialVal","useState","value","setValue","e","target","TodoForm","addTodo","useInputState","handleChange","reset","margin","padding","onSubmit","preventDefault","TextField","onChange","label","fullWidth","TodoApp","setTodos","height","backgroundColor","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","newTodoText","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gWA4BeA,MAnBf,YAAmC,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,UACpB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUC,UAAW,EAAGC,QAASJ,IACjC,kBAACC,EAAA,EAAD,CAAcI,MAAO,CAACC,eAAgBN,EAAY,eAAiB,SAChED,GAEH,kBAACQ,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,aAAW,UACrB,kBAAC,IAAD,OAEF,kBAACD,EAAA,EAAD,CAAYC,aAAW,QACrB,kBAAC,IAAD,U,kBCEKC,MAhBf,SAAkBC,GAChB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGF,EAAMG,MAAMC,IAAI,SAAAC,GAAI,OACnB,oCACA,kBAAC,EAAD,CAAMjB,KAAMiB,EAAKjB,KAAMkB,IAAKD,EAAKE,GAAIlB,UAAWgB,EAAKhB,YACrD,kBAACmB,EAAA,EAAD,Y,SCZK,WAAAC,GAAe,IAAD,EACDC,mBAASD,GADR,mBACpBE,EADoB,KACbC,EADa,KAQ3B,MAAO,CAACD,EANa,SAAAE,GACnBD,EAASC,EAAEC,OAAOH,QAEN,WACZC,EAAS,OCmBEG,MAtBf,YAA6B,IAAVC,EAAS,EAATA,QAAS,EACWC,EAAc,IADzB,mBACnBN,EADmB,KACZO,EADY,KACEC,EADF,KAE1B,OACE,kBAAClB,EAAA,EAAD,CAAOP,MAAO,CAAE0B,OAAQ,SAAUC,QAAS,WACzC,0BACAC,SAAU,SAAAT,GACRA,EAAEU,iBACFP,EAAQL,GACRQ,MAEA,kBAACK,EAAA,EAAD,CACEb,MAAOA,EACPc,SAAUP,EACVE,OAAO,SACPM,MAAM,eACNC,WAAS,O,SCyBJC,MAnCf,WACE,IADgB,EAMUlB,mBALL,CACnB,CAAEH,GAAI,EAAGnB,KAAM,iBAAkBC,WAAW,GAC5C,CAAEkB,GAAI,EAAGnB,KAAM,WAAYC,WAAW,GACtC,CAAEkB,GAAI,EAAGnB,KAAM,aAAcC,WAAW,KAJ1B,mBAMTc,EANS,KAMF0B,EANE,KAUhB,OACE,kBAAC5B,EAAA,EAAD,CACEP,MAAO,CACL2B,QAAS,EACTD,OAAQ,EACRU,OAAQ,QACRC,gBAAiB,WAEnBC,UAAW,GAET,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,SAAS,SAASzC,MAAO,CAACoC,OAAQ,SACxD,kBAACM,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYH,MAAM,WAAlB,sBAGJ,kBAACI,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAAS9C,MAAO,CAAC+C,UAAW,SAClD,kBAACH,EAAA,EAAD,CAAMI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAAC,EAAD,CAAU7B,QApBJ,SAAA8B,GACdjB,EAAS,GAAD,mBAAK1B,GAAL,CAAY,CAACI,GAAG,EAAEnB,KAAK0D,EAAYzD,WAAU,SAoB7C,kBAAC,EAAD,CAAUc,MAAOA,Q,MC1Bd4C,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c125c565.chunk.js","sourcesContent":["import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nfunction Todo({ task, completed }){\n  return (\n    <ListItem>\n      <Checkbox tabIndex={-1} checked={completed} />\n      <ListItemText style={{textDecoration: completed ? \"line-through\" : \"none\"}}>\n        {task}\n      </ListItemText>\n      <ListItemSecondaryAction>\n        <IconButton aria-label=\"Delete\">\n          <DeleteIcon />\n        </IconButton>\n        <IconButton aria-label=\"Edit\">\n          <EditIcon />\n        </IconButton>\n      </ListItemSecondaryAction>\n    </ListItem>\n  )\n}\n\nexport default Todo;","import React from 'react';\nimport Todo from './Todo';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\n\n\nfunction TodoList(props){\n  return(\n    <Paper>\n      <List>\n        {props.todos.map(todo => (\n          <>\n          <Todo task={todo.task} key={todo.id} completed={todo.completed} />\n          <Divider />\n          </>\n        ))}\n      </List>\n      \n    </Paper>\n  )\n}\n\nexport default TodoList;","import { useState } from 'react';\n\nexport default initialVal => {\n  const [value, setValue] = useState(initialVal);\n  const handleChange = e => {\n    setValue(e.target.value);\n  };\n  const reset = () => {\n    setValue('');\n  };\n  return [value, handleChange, reset];\n}","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport useInputState from './hooks/useInputState';\n\nfunction TodoForm({addTodo}){\n  const [value, handleChange, reset] = useInputState(\"\");\n  return(\n    <Paper style={{ margin: '1rem 0', padding: '0 1rem' }}>\n      <form \n      onSubmit={e => {\n        e.preventDefault();\n        addTodo(value);\n        reset();\n      }}>\n        <TextField \n          value={value} \n          onChange={handleChange}\n          margin=\"normal\"\n          label=\"Add New Todo\"\n          fullWidth\n        />\n      </form>\n    </Paper>\n  )\n}\n\nexport default TodoForm;","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport Grid from '@material-ui/core/Grid';\n\n\nfunction TodoApp(){\n  const initialTodos = [\n    { id: 1, task: \"Clean Fishtank\", completed: false},\n    { id: 2, task: \"Wash Car\", completed: true},\n    { id: 3, task: \"Grow Beard\", completed: false}\n  ];\n  const [todos, setTodos] = useState(initialTodos);\n  const addTodo = newTodoText => {\n    setTodos([...todos, {id:4,task:newTodoText,completed:false}]);\n  }\n  return (\n    <Paper\n      style={{\n        padding: 0,\n        margin: 0,\n        height: \"100vh\",\n        backgroundColor: \"#fafafa\"\n      }}\n      elevation={0}\n    >\n        <AppBar color=\"primary\" position=\"static\" style={{height: \"64px\"}}>\n          <Toolbar>\n            <Typography color=\"inherit\">TODOS WITH HOOKS</Typography>\n          </Toolbar>\n        </AppBar>\n        <Grid container justify='center' style={{marginTop: '1rem'}}>\n          <Grid item xs={11} md={8} lg={8}>\n            <TodoForm addTodo={addTodo} />\n            <TodoList todos={todos}/>\n          </Grid>\n        </Grid>\n    </Paper>\n  )\n}\n\nexport default TodoApp;","import React from 'react';\nimport TodoApp from './TodoApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}